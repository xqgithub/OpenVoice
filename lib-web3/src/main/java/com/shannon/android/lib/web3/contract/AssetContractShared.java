package com.shannon.android.lib.web3.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint96;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.2.
 */
@SuppressWarnings("rawtypes")
public class AssetContractShared extends Contract {
    public static final String BINARY = "0x60806040526003805460ff191690553480156200001b57600080fd5b5060405162004578380380620045788339810160408190526200003e916200050d565b84848483838382604051806020016040528060008152506200006681620001ad60201b60201c565b506200007b62000075620001bf565b620001db565b6006805460ff60a01b19169055600762000096848262000672565b506008620000a5838262000672565b50600b80546001600160a01b0319166001600160a01b03831617905560078054620001619190620000d690620005e3565b80601f01602080910402602001604051908101604052809291908181526020018280546200010490620005e3565b8015620001555780601f10620001295761010080835404028352916020019162000155565b820191906000526020600020905b8154815290600101906020018083116200013757829003601f168201915b50506200022d92505050565b505082511590506200017857620001788262000292565b50506001600f555050601380546001600160601b0319166001600160601b039390931692909217909155506200073e92505050565b6002620001bb828262000672565b5050565b6000620001d66200031960201b6200180e1760201c565b905090565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60035460ff1615620002775760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481a5b9a5d195960921b60448201526064015b60405180910390fd5b620002828162000377565b506003805460ff19166001179055565b620002a6620002a0620001bf565b62000419565b6200030b5760405162461bcd60e51b815260206004820152602e60248201527f455243313135355472616461626c65236f6e6c794f776e65723a2043414c4c4560448201526d292fa4a9afa727aa2fa7aba722a960911b60648201526084016200026e565b600c620001bb828262000672565b60003033036200037157600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b03169150620003749050565b50335b90565b6040518060800160405280604f815260200162004529604f9139805160209182012082519282019290922060408051808201825260018152603160f81b90840152805180840194909452838101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608401523060808401524660a0808501919091528151808503909101815260c090930190528151910120600455565b60006001600160a01b038216620004386006546001600160a01b031690565b6001600160a01b03161492915050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200047057600080fd5b81516001600160401b03808211156200048d576200048d62000448565b604051601f8301601f19908116603f01168101908282118183101715620004b857620004b862000448565b81604052838152602092508683858801011115620004d557600080fd5b600091505b83821015620004f95785820183015181830184015290820190620004da565b600093810190920192909252949350505050565b600080600080600060a086880312156200052657600080fd5b85516001600160401b03808211156200053e57600080fd5b6200054c89838a016200045e565b965060208801519150808211156200056357600080fd5b6200057189838a016200045e565b955060408801519150808211156200058857600080fd5b5062000597888289016200045e565b606088015190945090506001600160601b0381168114620005b757600080fd5b60808701519092506001600160a01b0381168114620005d557600080fd5b809150509295509295909350565b600181811c90821680620005f857607f821691505b6020821081036200061957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200066d57600081815260208120601f850160051c81016020861015620006485750805b601f850160051c820191505b81811015620006695782815560010162000654565b5050505b505050565b81516001600160401b038111156200068e576200068e62000448565b620006a6816200069f8454620005e3565b846200061f565b602080601f831160018114620006de5760008415620006c55750858301515b600019600386901b1c1916600185901b17855562000669565b600085815260208120601f198616915b828110156200070f57888601518255948401946001909101908401620006ee565b50858210156200072e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b613ddb806200074e6000396000f3fe60806040526004361061025b5760003560e01c8063715018a611610144578063c06b91c3116100b6578063e985e9c51161007a578063e985e9c514610772578063f242432a14610792578063f2fde38b146107b2578063f5298aca146107d2578063f6eb127a146107f2578063f923e8c31461081257600080fd5b8063c06b91c3146106de578063c311c523146106fe578063cd7c032614610712578063d26ea6c014610732578063d3b9ff7f1461075257600080fd5b80638da5cb5b116101085780638da5cb5b1461061e57806391686f531461063c57806395d89b411461065c578063a22cb46514610671578063b48ab8b614610691578063bd85b039146106b157600080fd5b8063715018a614610594578063731133e9146105a95780638456cb59146105c9578063862440e2146105de578063869f7594146105fe57600080fd5b80632a55205a116101dd5780633f4ba83a116101a15780633f4ba83a146104945780634e1273f4146104a95780634f558e79146104d6578063510b5158146105055780635c975abb1461053d5780636d0042b81461055c57600080fd5b80632a55205a146103cc5780632d0335ab1461040b5780632eb2c2d6146104415780633408e470146104615780633588ad7c1461047457600080fd5b80630e89341c116102245780630e89341c1461031a5780630f7e59701461033a5780631e7d9dbb1461036757806320379ee51461039757806324d88785146103ac57600080fd5b8062fdd58e1461026057806301ffc9a71461029357806306fdde03146102c357806307291f8f146102e55780630c53c51c14610307575b600080fd5b34801561026c57600080fd5b5061028061027b366004612f08565b610827565b6040519081526020015b60405180910390f35b34801561029f57600080fd5b506102b36102ae366004612f48565b610867565b604051901515815260200161028a565b3480156102cf57600080fd5b506102d86108c2565b60405161028a9190612fb5565b3480156102f157600080fd5b50610305610300366004612fc8565b610950565b005b6102d8610315366004613096565b6109a9565b34801561032657600080fd5b506102d8610335366004612fc8565b610b86565b34801561034657600080fd5b506102d8604051806040016040528060018152602001603160f81b81525081565b34801561037357600080fd5b506102b3610382366004612fc8565b6000908152600e602052604090205460ff1690565b3480156103a357600080fd5b50600454610280565b3480156103b857600080fd5b506103056103c7366004613111565b610cc6565b3480156103d857600080fd5b506103ec6103e7366004613145565b610d02565b604080516001600160a01b03909316835260208301919091520161028a565b34801561041757600080fd5b50610280610426366004613167565b6001600160a01b031660009081526005602052604090205490565b34801561044d57600080fd5b5061030561045c366004613216565b610dae565b34801561046d57600080fd5b5046610280565b34801561048057600080fd5b5061030561048f3660046132bf565b610e8a565b3480156104a057600080fd5b50610305610f31565b3480156104b557600080fd5b506104c96104c4366004613305565b610f62565b60405161028a9190613400565b3480156104e257600080fd5b506102b36104f1366004612fc8565b6000908152600a6020526040902054151590565b34801561051157600080fd5b50610525610520366004612fc8565b61108b565b6040516001600160a01b03909116815260200161028a565b34801561054957600080fd5b50600654600160a01b900460ff166102b3565b34801561056857600080fd5b5060135461057c906001600160601b031681565b6040516001600160601b03909116815260200161028a565b3480156105a057600080fd5b506103056110d2565b3480156105b557600080fd5b506103056105c4366004613413565b6110e4565b3480156105d557600080fd5b5061030561111d565b3480156105ea57600080fd5b506103056105f93660046132bf565b61114c565b34801561060a57600080fd5b50610280610619366004612fc8565b6111d8565b34801561062a57600080fd5b506006546001600160a01b0316610525565b34801561064857600080fd5b50610305610657366004613473565b6111e3565b34801561066857600080fd5b506102d86112d5565b34801561067d57600080fd5b5061030561068c36600461349f565b6112e2565b34801561069d57600080fd5b506103056106ac3660046134db565b6112f4565b3480156106bd57600080fd5b506102806106cc366004612fc8565b6000908152600a602052604090205490565b3480156106ea57600080fd5b506103056106f936600461357e565b61140f565b34801561070a57600080fd5b5060016102b3565b34801561071e57600080fd5b50600b54610525906001600160a01b031681565b34801561073e57600080fd5b5061030561074d366004613167565b61145d565b34801561075e57600080fd5b5061030561076d366004613599565b6114a6565b34801561077e57600080fd5b506102b361078d36600461360a565b611571565b34801561079e57600080fd5b506103056107ad366004613634565b6115c3565b3480156107be57600080fd5b506103056107cd366004613167565b611613565b3480156107de57600080fd5b506103056107ed366004613698565b61168c565b3480156107fe57600080fd5b5061030561080d3660046136cb565b611723565b34801561081e57600080fd5b506102d8611801565b600080610834848461186a565b905061084083856118fe565b61084a578061085d565b61085383611942565b61085d9082613754565b9150505b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061089857506001600160e01b031982166303a24d0760e21b145b806108b357506001600160e01b0319821663152a902d60e11b145b80610861575061086182611964565b600780546108cf90613767565b80601f01602080910402602001604051908101604052809291908181526020018280546108fb90613767565b80156109485780601f1061091d57610100808354040283529160200191610948565b820191906000526020600020905b81548152906001019060200180831161092b57829003601f168201915b505050505081565b61095981611989565b6001600160a01b0316600061096c6119a3565b6001600160a01b0316600080516020613d438339815191528461098e866119b2565b6040805192835260208301919091520160405180910390a450565b60408051606081810183526001600160a01b038816600081815260056020908152908590205484528301529181018690526109e787828787876119cd565b610a425760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636044820152600d60fb1b60648201526084015b60405180910390fd5b6001600160a01b0387166000908152600560205260408120805460019290610a6b908490613754565b90915550506040517f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b90610aa490899033908a906137a1565b60405180910390a1600080306001600160a01b0316888a604051602001610acc9291906137d6565b60408051601f1981840301815290829052610ae69161380d565b6000604051808303816000865af19150503d8060008114610b23576040519150601f19603f3d011682016040523d82523d6000602084013e610b28565b606091505b509150915081610b7a5760405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c000000006044820152606401610a39565b98975050505050505050565b6000818152600d6020526040812080546060929190610ba490613767565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd090613767565b8015610c1d5780601f10610bf257610100808354040283529160200191610c1d565b820191906000526020600020905b815481529060010190602001808311610c0057829003601f168201915b505050505090508051600014610c335792915050565b600c8054610c4090613767565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6c90613767565b8015610cb95780601f10610c8e57610100808354040283529160200191610cb9565b820191906000526020600020905b815481529060010190602001808311610c9c57829003601f168201915b5050505050915050919050565b610cd6610cd16119a3565b611abd565b610cf25760405162461bcd60e51b8152600401610a3990613829565b600c610cfe82826138bd565b5050565b60008281526011602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610d775750604080518082019091526010546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610d96906001600160601b03168761397c565b610da09190613993565b915196919550909350505050565b8151835114610e255760405162461bcd60e51b815260206004820152603a60248201527f4173736574436f6e7472616374237361666542617463685472616e736665724660448201527f726f6d3a20494e56414c49445f4152524159535f4c454e4754480000000000006064820152608401610a39565b60005b8351811015610e8257610e708686868481518110610e4857610e486139b5565b6020026020010151868581518110610e6257610e626139b5565b6020026020010151866115c3565b80610e7a816139cb565b915050610e28565b505050505050565b81610e9c81610e976119a3565b6118fe565b610eb85760405162461bcd60e51b8152600401610a39906139e4565b6000838152600e6020526040902054839060ff1615610ee95760405162461bcd60e51b8152600401610a3990613a39565b83610f04610ef56119a3565b82610eff846119b2565b611aeb565b610f205760405162461bcd60e51b8152600401610a3990613a96565b610f2a8585611b02565b5050505050565b610f3c610cd16119a3565b610f585760405162461bcd60e51b8152600401610a3990613829565b610f60611bc8565b565b60608151835114610fc75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610a39565b600083516001600160401b03811115610fe257610fe2612fe1565b60405190808252806020026020018201604052801561100b578160200160208202803683370190505b50905060005b84518110156110835761105685828151811061102f5761102f6139b5565b6020026020010151858381518110611049576110496139b5565b6020026020010151610827565b828281518110611068576110686139b5565b602090810291909101015261107c816139cb565b9050611011565b509392505050565b6000818152601260205260408120546001600160a01b0316156110c457506000908152601260205260409020546001600160a01b031690565b61086182611989565b919050565b6110da611c23565b610f606000611c9c565b6110ef610cd16119a3565b61110b5760405162461bcd60e51b8152600401610a3990613829565b61111784848484611cee565b50505050565b611128610cd16119a3565b6111445760405162461bcd60e51b8152600401610a3990613829565b610f60611d0e565b8161115981610e976119a3565b6111755760405162461bcd60e51b8152600401610a39906139e4565b6000838152600e6020526040902054839060ff16156111a65760405162461bcd60e51b8152600401610a3990613a39565b836111b2610ef56119a3565b6111ce5760405162461bcd60e51b8152600401610a3990613a96565b610f2a8585611d52565b6000610861826119b2565b816111f081610e976119a3565b61120c5760405162461bcd60e51b8152600401610a39906139e4565b6001600160a01b03821661127b5760405162461bcd60e51b815260206004820152603060248201527f4173736574436f6e74726163745368617265642373657443726561746f723a2060448201526f24a72b20a624a22fa0a2222922a9a99760811b6064820152608401610a39565b60008381526012602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051909185917f39071c63e44267bfdefc7b625c0df99d3ce2e6ff98d9f5e9e8a7ab43cdf5000d9190a3505050565b600880546108cf90613767565b610cfe6112ed6119a3565b8383611d9b565b6002600f54036113465760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a39565b6002600f5560005b83518110156113f75761137c84828151811061136c5761136c6139b5565b6020026020010151610e976119a3565b6113e55760405162461bcd60e51b815260206004820152603460248201527f4173736574436f6e7472616374536861726564235f62617463684d696e743a2060448201527313d3931657d0d491505513d497d0531313d5d15160621b6064820152608401610a39565b806113ef816139cb565b91505061134e565b5061140484848484611e7b565b50506001600f555050565b61141a610cd16119a3565b6114365760405162461bcd60e51b8152600401610a3990613829565b601380546bffffffffffffffffffffffff19166001600160601b0392909216919091179055565b611468610cd16119a3565b6114845760405162461bcd60e51b8152600401610a3990613829565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6002600f54036114f85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a39565b6002600f558361150a81610e976119a3565b6115265760405162461bcd60e51b8152600401610a39906139e4565b61153286868686611cee565b600061153f866001610d02565b5090506001600160a01b038116611563576115638661155d88611989565b85611ed2565b50506001600f555050505050565b600b546000906001600160a01b039081169083160361159257506001610861565b6001600160a01b0380841660009081526001602090815260408083209386168352929052205460ff165b9392505050565b60006115cf868561186a565b905082811015611606576115ee85856115e88487613b01565b856110e4565b8015611601576116018686868486611fe0565b610e82565b610e828686868686611fe0565b61161b611c23565b6001600160a01b0381166116805760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a39565b61168981611c9c565b50565b82828261169a838383611aeb565b6117185760405162461bcd60e51b815260206004820152604360248201527f4173736574436f6e7472616374236f6e6c79546f6b656e416d6f756e744f776e60448201527f65643a204f4e4c595f544f4b454e5f414d4f554e545f4f574e45445f414c4c4f60648201526215d15160ea1b608482015260a401610a39565b610e828686866121e1565b60005b82518110156117f05761176c84848381518110611745576117456139b5565b602002602001015184848151811061175f5761175f6139b5565b6020026020010151611aeb565b6117de5760405162461bcd60e51b815260206004820152603860248201527f4173736574436f6e74726163742362617463684275726e3a204f4e4c595f544f60448201527f4b454e5f414d4f554e545f4f574e45445f414c4c4f57454400000000000000006064820152608401610a39565b806117e8816139cb565b915050611726565b506117fc838383612237565b505050565b600c80546108cf90613767565b600030330361186457600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506118679050565b50335b90565b60006001600160a01b0383166118d65760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b6064820152608401610a39565b5060009081526009602090815260408083206001600160a01b03949094168352929052205490565b60008061190a8461108b565b9050826001600160a01b0316816001600160a01b0316148061085d5750600b546001600160a01b039081169084161491505092915050565b6000818152600a602052604081205461195a836111d8565b6108619190613b01565b60006001600160e01b0319821663152a902d60e11b148061086157506108618261228d565b600061199760286038613b14565b60ff169190911c919050565b60006119ad61180e565b905090565b60006119c5600165010000000000613b01565b909116919050565b60006001600160a01b038616611a335760405162461bcd60e51b815260206004820152602560248201527f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360448201526424a3a722a960d91b6064820152608401610a39565b6001611a46611a41876122dd565b61235a565b6040805160008152602081018083529290925260ff851690820152606081018690526080810185905260a0016020604051602081039080840390855afa158015611a94573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614905095945050505050565b6000816001600160a01b0316611adb6006546001600160a01b031690565b6001600160a01b03161492915050565b600081611af88585610827565b1015949350505050565b6000815111611b695760405162461bcd60e51b815260206004820152602d60248201527f4173736574436f6e7472616374237365745065726d616e656e745552493a204f60448201526c4e4c595f56414c49445f55524960981b6064820152608401610a39565b6000828152600e60205260409020805460ff19166001179055611b8c8282611d52565b817fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b5565720782604051611bbc9190612fb5565b60405180910390a25050565b611bd061238a565b6006805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611c066119a3565b6040516001600160a01b03909116815260200160405180910390a1565b611c2b6119a3565b6001600160a01b0316611c466006546001600160a01b031690565b6001600160a01b031614610f605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a39565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611cfa848484846123da565b60018151111561111757611117838261114c565b611d166124d5565b6006805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611c066119a3565b6000828152600d60205260409020611d6a82826138bd565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b82604051611bbc9190612fb5565b816001600160a01b0316836001600160a01b031603611e0e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610a39565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611e8784848484612522565b6001815111156111175760005b8351811015610f2a57611ec0848281518110611eb257611eb26139b5565b60200260200101518361114c565b80611eca816139cb565b915050611e94565b6127106001600160601b0382161115611f405760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608401610a39565b6001600160a01b038216611f965760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610a39565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752601190529190942093519051909116600160a01b029116179055565b611fe86124d5565b84611ff16119a3565b6001600160a01b0316816001600160a01b0316148061201757506120178161078d6119a3565b6120335760405162461bcd60e51b8152600401610a3990613b2d565b6001600160a01b0385166120975760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610a39565b60006120a16119a3565b90506120bb8188886120b289612785565b610f2a89612785565b60008581526009602090815260408083206001600160a01b038b168452909152902054848110156121415760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610a39565b61214b8582613b01565b60008781526009602090815260408083206001600160a01b038d81168552925280832093909355891681529081208054879290612189908490613754565b909155505060408051878152602081018790526001600160a01b03808a16928b82169291861691600080516020613d43833981519152910160405180910390a46121d78289898989896127d0565b5050505050505050565b826121ea6119a3565b6001600160a01b0316816001600160a01b0316148061221057506122108161078d6119a3565b61222c5760405162461bcd60e51b8152600401610a3990613b2d565b61111784848461292b565b826122406119a3565b6001600160a01b0316816001600160a01b0316148061226657506122668161078d6119a3565b6122825760405162461bcd60e51b8152600401610a3990613b2d565b611117848484612b3f565b60006001600160e01b03198216636cdb3d1360e11b14806122be57506001600160e01b031982166303a24d0760e21b145b8061086157506301ffc9a760e01b6001600160e01b0319831614610861565b6000604051806080016040528060438152602001613d63604391398051602091820120835184830151604080870151805190860120905161233d950193845260208401929092526001600160a01b03166040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b600061236560045490565b60405161190160f01b602082015260228101919091526042810183905260620161233d565b600654600160a01b900460ff16610f605760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a39565b6123e26124d5565b60006123ec6119a3565b9050612407816000876123fe88612785565b610f2a88612785565b6124118484612dad565b60008481526009602090815260408083206001600160a01b038916845290915281208054859290612443908490613754565b90915550506000848152600a602052604081208054859290612466908490613754565b909155506000905061247785612e2b565b9050856001600160a01b0316816001600160a01b0316836001600160a01b0316600080516020613d4383398151915288886040516124bf929190918252602082015260400190565b60405180910390a4610e828282888888886127d0565b600654600160a01b900460ff1615610f605760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a39565b61252a6124d5565b81518351146125945760405162461bcd60e51b815260206004820152603060248201527f455243313135355472616461626c652362617463684d696e743a20494e56414c60448201526f09288be82a4a482b2a6be988a9c8ea8960831b6064820152608401610a39565b825160006125b78582846125aa576125aa6139b5565b6020026020010151612e2b565b905060006125c36119a3565b905060005b838110156127165760008782815181106125e4576125e46139b5565b602002602001015190506000878381518110612602576126026139b5565b602002602001015190506126168282612dad565b846001600160a01b031661262983612e2b565b6001600160a01b0316146126a55760405162461bcd60e51b815260206004820152603760248201527f455243313135355472616461626c652362617463684d696e743a204d554c544960448201527f504c455f4f524947494e535f4e4f545f414c4c4f5745440000000000000000006064820152608401610a39565b60008281526009602090815260408083206001600160a01b038e168452909152812080548392906126d7908490613754565b90915550506000828152600a6020526040812080548392906126fa908490613754565b925050819055505050808061270e906139cb565b9150506125c8565b50866001600160a01b0316826001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8989604051612766929190613b7d565b60405180910390a461277c818389898989612e36565b50505050505050565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106127bf576127bf6139b5565b602090810291909101015292915050565b6001600160a01b0384163b15610e825760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906128149089908990889088908890600401613ba2565b6020604051808303816000875af192505050801561284f575060408051601f3d908101601f1916820190925261284c91810190613be7565b60015b6128fb5761285b613c04565b806308c379a003612894575061286f613c1f565b8061287a5750612896565b8060405162461bcd60e51b8152600401610a399190612fb5565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610a39565b6001600160e01b0319811663f23a6e6160e01b1461277c5760405162461bcd60e51b8152600401610a3990613ca8565b6129336124d5565b6001600160a01b0383166129975760405162461bcd60e51b815260206004820152602560248201527f45524331313535235f6275726e3a204255524e5f46524f4d5f5a45524f5f4144604482015264445245535360d81b6064820152608401610a39565b600081116129f35760405162461bcd60e51b815260206004820152602360248201527f45524331313535235f6275726e3a20414d4f554e545f4c4553535f5448414e5f6044820152624f4e4560e81b6064820152608401610a39565b60006129fd6119a3565b9050612a2e81856000612a0f87612785565b612a1887612785565b5050604080516020810190915260009052505050565b60008381526009602090815260408083206001600160a01b038816845290915290205482811015612aaf5760405162461bcd60e51b815260206004820152602560248201527f45524331313535235f6275726e3a20414d4f554e545f455843454544535f42416044820152644c414e434560d81b6064820152608401610a39565b612ab98382613b01565b60008581526009602090815260408083206001600160a01b038a168452825280832093909355868252600a90529081208054859290612af9908490613b01565b909155505060408051858152602081018590526000916001600160a01b038881169290861691600080516020613d43833981519152910160405180910390a45050505050565b612b476124d5565b6001600160a01b038316612b9d5760405162461bcd60e51b815260206004820152601f60248201527f455243313135353a204255524e5f46524f4d5f5a45524f5f41444452455353006044820152606401610a39565b8051825114612bfa5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a204944535f414d4f554e54535f4c454e4754485f4d49534d604482015263082a886960e31b6064820152608401610a39565b6000612c046119a3565b604080516020810190915260009052905060005b8351811015612d4e576000848281518110612c3557612c356139b5565b602002602001015190506000848381518110612c5357612c536139b5565b60209081029190910181015160008481526009835260408082206001600160a01b038c168352909352919091205490915081811015612ce75760405162461bcd60e51b815260206004820152602a60248201527f45524331313535235f6275726e42617463683a20414d4f554e545f455843454560448201526944535f42414c414e434560b01b6064820152608401610a39565b612cf18282613b01565b60008481526009602090815260408083206001600160a01b038d168452825280832093909355858252600a90529081208054849290612d31908490613b01565b925050819055505050508080612d46906139cb565b915050612c18565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612d9f929190613b7d565b60405180910390a450505050565b612db682611942565b811115610cfe5760405162461bcd60e51b815260206004820152603c60248201527f4173736574436f6e7472616374235f6265666f72654d696e743a205155414e5460448201527f4954595f455843454544535f544f4b454e5f535550504c595f434150000000006064820152608401610a39565b600061086182611989565b6001600160a01b0384163b15610e825760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612e7a9089908990889088908890600401613cf0565b6020604051808303816000875af1925050508015612eb5575060408051601f3d908101601f19168201909252612eb291810190613be7565b60015b612ec15761285b613c04565b6001600160e01b0319811663bc197c8160e01b1461277c5760405162461bcd60e51b8152600401610a3990613ca8565b80356001600160a01b03811681146110cd57600080fd5b60008060408385031215612f1b57600080fd5b612f2483612ef1565b946020939093013593505050565b6001600160e01b03198116811461168957600080fd5b600060208284031215612f5a57600080fd5b81356115bc81612f32565b60005b83811015612f80578181015183820152602001612f68565b50506000910152565b60008151808452612fa1816020860160208601612f65565b601f01601f19169290920160200192915050565b6020815260006115bc6020830184612f89565b600060208284031215612fda57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561301c5761301c612fe1565b6040525050565b600082601f83011261303457600080fd5b81356001600160401b0381111561304d5761304d612fe1565b604051613064601f8301601f191660200182612ff7565b81815284602083860101111561307957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156130ae57600080fd5b6130b786612ef1565b945060208601356001600160401b038111156130d257600080fd5b6130de88828901613023565b9450506040860135925060608601359150608086013560ff8116811461310357600080fd5b809150509295509295909350565b60006020828403121561312357600080fd5b81356001600160401b0381111561313957600080fd5b61085d84828501613023565b6000806040838503121561315857600080fd5b50508035926020909101359150565b60006020828403121561317957600080fd5b6115bc82612ef1565b60006001600160401b0382111561319b5761319b612fe1565b5060051b60200190565b600082601f8301126131b657600080fd5b813560206131c382613182565b6040516131d08282612ff7565b83815260059390931b85018201928281019150868411156131f057600080fd5b8286015b8481101561320b57803583529183019183016131f4565b509695505050505050565b600080600080600060a0868803121561322e57600080fd5b61323786612ef1565b945061324560208701612ef1565b935060408601356001600160401b038082111561326157600080fd5b61326d89838a016131a5565b9450606088013591508082111561328357600080fd5b61328f89838a016131a5565b935060808801359150808211156132a557600080fd5b506132b288828901613023565b9150509295509295909350565b600080604083850312156132d257600080fd5b8235915060208301356001600160401b038111156132ef57600080fd5b6132fb85828601613023565b9150509250929050565b6000806040838503121561331857600080fd5b82356001600160401b038082111561332f57600080fd5b818501915085601f83011261334357600080fd5b8135602061335082613182565b60405161335d8282612ff7565b83815260059390931b850182019282810191508984111561337d57600080fd5b948201945b838610156133a25761339386612ef1565b82529482019490820190613382565b965050860135925050808211156133b857600080fd5b506132fb858286016131a5565b600081518084526020808501945080840160005b838110156133f5578151875295820195908201906001016133d9565b509495945050505050565b6020815260006115bc60208301846133c5565b6000806000806080858703121561342957600080fd5b61343285612ef1565b9350602085013592506040850135915060608501356001600160401b0381111561345b57600080fd5b61346787828801613023565b91505092959194509250565b6000806040838503121561348657600080fd5b8235915061349660208401612ef1565b90509250929050565b600080604083850312156134b257600080fd5b6134bb83612ef1565b9150602083013580151581146134d057600080fd5b809150509250929050565b600080600080608085870312156134f157600080fd5b6134fa85612ef1565b935060208501356001600160401b038082111561351657600080fd5b613522888389016131a5565b9450604087013591508082111561353857600080fd5b613544888389016131a5565b9350606087013591508082111561355a57600080fd5b5061346787828801613023565b80356001600160601b03811681146110cd57600080fd5b60006020828403121561359057600080fd5b6115bc82613567565b600080600080600060a086880312156135b157600080fd5b6135ba86612ef1565b9450602086013593506040860135925060608601356001600160401b038111156135e357600080fd5b6135ef88828901613023565b9250506135fe60808701613567565b90509295509295909350565b6000806040838503121561361d57600080fd5b61362683612ef1565b915061349660208401612ef1565b600080600080600060a0868803121561364c57600080fd5b61365586612ef1565b945061366360208701612ef1565b9350604086013592506060860135915060808601356001600160401b0381111561368c57600080fd5b6132b288828901613023565b6000806000606084860312156136ad57600080fd5b6136b684612ef1565b95602085013595506040909401359392505050565b6000806000606084860312156136e057600080fd5b6136e984612ef1565b925060208401356001600160401b038082111561370557600080fd5b613711878388016131a5565b9350604086013591508082111561372757600080fd5b50613734868287016131a5565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b808201808211156108615761086161373e565b600181811c9082168061377b57607f821691505b60208210810361379b57634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b038481168252831660208201526060604082018190526000906137cd90830184612f89565b95945050505050565b600083516137e8818460208801612f65565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b6000825161381f818460208701612f65565b9190910192915050565b6020808252602e908201527f455243313135355472616461626c65236f6e6c794f776e65723a2043414c4c4560408201526d292fa4a9afa727aa2fa7aba722a960911b606082015260800190565b601f8211156117fc57600081815260208120601f850160051c8101602086101561389e5750805b601f850160051c820191505b81811015610e82578281556001016138aa565b81516001600160401b038111156138d6576138d6612fe1565b6138ea816138e48454613767565b84613877565b602080601f83116001811461391f57600084156139075750858301515b600019600386901b1c1916600185901b178555610e82565b600085815260208120601f198616915b8281101561394e5788860151825594840194600190910190840161392f565b508582101561396c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820281158282048414176108615761086161373e565b6000826139b057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b6000600182016139dd576139dd61373e565b5060010190565b60208082526035908201527f4173736574436f6e74726163745368617265642363726561746f724f6e6c793a6040820152740813d3931657d0d491505513d497d0531313d5d151605a1b606082015260800190565b60208082526037908201527f4173736574436f6e7472616374236f6e6c79496d7065726d616e656e7455524960408201527f3a205552495f43414e4e4f545f42455f4348414e474544000000000000000000606082015260800190565b60208082526045908201527f4173736574436f6e7472616374536861726564236f6e6c7946756c6c546f6b6560408201527f6e4f776e65723a204f4e4c595f46554c4c5f544f4b454e5f4f574e45525f414c6060820152641313d5d15160da1b608082015260a00190565b818103818111156108615761086161373e565b60ff81811683821601908111156108615761086161373e565b60208082526030908201527f455243313135355472616461626c65236f6e6c79417070726f7665643a20434160408201526f1313115497d393d517d0531313d5d15160821b606082015260800190565b604081526000613b9060408301856133c5565b82810360208401526137cd81856133c5565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613bdc90830184612f89565b979650505050505050565b600060208284031215613bf957600080fd5b81516115bc81612f32565b600060033d11156118675760046000803e5060005160e01c90565b600060443d1015613c2d5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715613c5c57505050505090565b8285019150815181811115613c745750505050505090565b843d8701016020828501011115613c8e5750505050505090565b613c9d60208286010187612ff7565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a060408201819052600090613d1c908301866133c5565b8281036060840152613d2e81866133c5565b90508281036080840152610b7a8185612f8956fec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f624d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a2646970667358221220cb11cb6fa3b236230b3e4e7014abc88498034ddd47cac9db40f8cb4a8591a23364736f6c63430008110033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429";

    public static final String FUNC_ERC712_VERSION = "ERC712_VERSION";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BATCHBURN = "batchBurn";

    public static final String FUNC_BATCHMINT = "batchMint";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_CREATEMINTEVENT = "createMintEvent";

    public static final String FUNC_CREATOR = "creator";

    public static final String FUNC_DEFAULTROYALTYFRACTION = "defaultRoyaltyFraction";

    public static final String FUNC_EXECUTEMETATRANSACTION = "executeMetaTransaction";

    public static final String FUNC_EXISTS = "exists";

    public static final String FUNC_GETCHAINID = "getChainId";

    public static final String FUNC_GETDOMAINSEPERATOR = "getDomainSeperator";

    public static final String FUNC_GETNONCE = "getNonce";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISPERMANENTURI = "isPermanentURI";

    public static final String FUNC_MAXSUPPLY = "maxSupply";

    public static final String FUNC_mint = "mint";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_PROXYREGISTRYADDRESS = "proxyRegistryAddress";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ROYALTYINFO = "royaltyInfo";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETCREATOR = "setCreator";

    public static final String FUNC_SETDEFAULTROYALTYFRACITON = "setDefaultRoyaltyFraciton";

    public static final String FUNC_SETPERMANENTURI = "setPermanentURI";

    public static final String FUNC_SETPROXYREGISTRYADDRESS = "setProxyRegistryAddress";

    public static final String FUNC_SETTEMPLATEURI = "setTemplateURI";

    public static final String FUNC_SETURI = "setURI";

    public static final String FUNC_SUPPORTSFACTORYINTERFACE = "supportsFactoryInterface";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TEMPLATEURI = "templateURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_URI = "uri";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event CREATORCHANGED_EVENT = new Event("CreatorChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event METATRANSACTIONEXECUTED_EVENT = new Event("MetaTransactionExecuted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event PERMANENTURI_EVENT = new Event("PermanentURI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected AssetContractShared(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AssetContractShared(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AssetContractShared(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AssetContractShared(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public   List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public   List<CreatorChangedEventResponse> getCreatorChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATORCHANGED_EVENT, transactionReceipt);
        ArrayList<CreatorChangedEventResponse> responses = new ArrayList<CreatorChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreatorChangedEventResponse typedResponse = new CreatorChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._creator = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreatorChangedEventResponse> creatorChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CreatorChangedEventResponse>() {
            @Override
            public CreatorChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CREATORCHANGED_EVENT, log);
                CreatorChangedEventResponse typedResponse = new CreatorChangedEventResponse();
                typedResponse.log = log;
                typedResponse._id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._creator = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CreatorChangedEventResponse> creatorChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATORCHANGED_EVENT));
        return creatorChangedEventFlowable(filter);
    }

    public   List<MetaTransactionExecutedEventResponse> getMetaTransactionExecutedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(METATRANSACTIONEXECUTED_EVENT, transactionReceipt);
        ArrayList<MetaTransactionExecutedEventResponse> responses = new ArrayList<MetaTransactionExecutedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MetaTransactionExecutedEventResponse typedResponse = new MetaTransactionExecutedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.userAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.relayerAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.functionSignature = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MetaTransactionExecutedEventResponse> metaTransactionExecutedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MetaTransactionExecutedEventResponse>() {
            @Override
            public MetaTransactionExecutedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(METATRANSACTIONEXECUTED_EVENT, log);
                MetaTransactionExecutedEventResponse typedResponse = new MetaTransactionExecutedEventResponse();
                typedResponse.log = log;
                typedResponse.userAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.relayerAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.functionSignature = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MetaTransactionExecutedEventResponse> metaTransactionExecutedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(METATRANSACTIONEXECUTED_EVENT));
        return metaTransactionExecutedEventFlowable(filter);
    }

    public   List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public   List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PausedEventResponse>() {
            @Override
            public PausedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSED_EVENT, log);
                PausedEventResponse typedResponse = new PausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public   List<PermanentURIEventResponse> getPermanentURIEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PERMANENTURI_EVENT, transactionReceipt);
        ArrayList<PermanentURIEventResponse> responses = new ArrayList<PermanentURIEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            PermanentURIEventResponse typedResponse = new PermanentURIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PermanentURIEventResponse> permanentURIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PermanentURIEventResponse>() {
            @Override
            public PermanentURIEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(PERMANENTURI_EVENT, log);
                PermanentURIEventResponse typedResponse = new PermanentURIEventResponse();
                typedResponse.log = log;
                typedResponse._id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._value = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PermanentURIEventResponse> permanentURIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PERMANENTURI_EVENT));
        return permanentURIEventFlowable(filter);
    }

    public   List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0);
            typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0);
                typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public   List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferSingleEventResponse>() {
            @Override
            public TransferSingleEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
                TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public   List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, URIEventResponse>() {
            @Override
            public URIEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(URI_EVENT, log);
                URIEventResponse typedResponse = new URIEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public   List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpausedEventResponse>() {
            @Override
            public UnpausedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSED_EVENT, log);
                UnpausedEventResponse typedResponse = new UnpausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<String> ERC712_VERSION() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ERC712_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String _owner, BigInteger _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(160, _owner),
                new Uint256(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> accounts, List<BigInteger> ids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                        Address.class,
                        org.web3j.abi.Utils.typeMap(accounts, Address.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> batchBurn(String _from, List<BigInteger> _ids, List<BigInteger> _quantities) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHBURN, 
                Arrays.<Type>asList(new Address(160, _from),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(_ids, Uint256.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(_quantities, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> batchMint(String _to, List<BigInteger> _ids, List<BigInteger> _quantities, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BATCHMINT, 
                Arrays.<Type>asList(new Address(160, _to),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(_ids, Uint256.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(_quantities, Uint256.class)),
                new DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(String _from, BigInteger _id, BigInteger _quantity) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new Address(160, _from),
                new Uint256(_id),
                new Uint256(_quantity)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createMintEvent(BigInteger _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEMINTEVENT, 
                Arrays.<Type>asList(new Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> creator(BigInteger _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CREATOR, 
                Arrays.<Type>asList(new Uint256(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> defaultRoyaltyFraction() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULTROYALTYFRACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint96>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> executeMetaTransaction(String userAddress, byte[] functionSignature, byte[] sigR, byte[] sigS, BigInteger sigV, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXECUTEMETATRANSACTION, 
                Arrays.<Type>asList(new Address(160, userAddress),
                new DynamicBytes(functionSignature),
                new Bytes32(sigR),
                new Bytes32(sigS),
                new org.web3j.abi.datatypes.generated.Uint8(sigV)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<Boolean> exists(BigInteger _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXISTS, 
                Arrays.<Type>asList(new Uint256(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> getChainId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> getDomainSeperator() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETDOMAINSEPERATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> getNonce(String user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNONCE, 
                Arrays.<Type>asList(new Address(160, user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String _owner, String _operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new Address(160, _owner),
                new Address(160, _operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isPermanentURI(BigInteger _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISPERMANENTURI, 
                Arrays.<Type>asList(new Uint256(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> maxSupply(BigInteger _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAXSUPPLY, 
                Arrays.<Type>asList(new Uint256(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String _to, BigInteger _id, BigInteger _quantity, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_mint, 
                Arrays.<Type>asList(new Address(160, _to),
                new Uint256(_id),
                new Uint256(_quantity),
                new DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String _to, BigInteger _id, BigInteger _quantity, byte[] _data, BigInteger _feeNumerator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_mint, 
                Arrays.<Type>asList(new Address(160, _to),
                new Uint256(_id),
                new Uint256(_quantity),
                new DynamicBytes(_data),
                new Uint96(_feeNumerator)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> proxyRegistryAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROXYREGISTRYADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> royaltyInfo(BigInteger _tokenId, BigInteger _salePrice) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROYALTYINFO, 
                Arrays.<Type>asList(new Uint256(_tokenId),
                new Uint256(_salePrice)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String _from, String _to, List<BigInteger> _ids, List<BigInteger> _amounts, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new Address(160, _from),
                new Address(160, _to),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(_ids, Uint256.class)),
                new DynamicArray<Uint256>(
                        Uint256.class,
                        org.web3j.abi.Utils.typeMap(_amounts, Uint256.class)),
                new DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String _from, String _to, BigInteger _id, BigInteger _amount, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new Address(160, _from),
                new Address(160, _to),
                new Uint256(_id),
                new Uint256(_amount),
                new DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(160, operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setCreator(BigInteger _id, String _to) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCREATOR, 
                Arrays.<Type>asList(new Uint256(_id),
                new Address(160, _to)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setDefaultRoyaltyFraciton(BigInteger _royaltyFraction) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETDEFAULTROYALTYFRACITON, 
                Arrays.<Type>asList(new Uint96(_royaltyFraction)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPermanentURI(BigInteger _id, String _uri) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPERMANENTURI, 
                Arrays.<Type>asList(new Uint256(_id),
                new Utf8String(_uri)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setProxyRegistryAddress(String _address) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPROXYREGISTRYADDRESS, 
                Arrays.<Type>asList(new Address(160, _address)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTemplateURI(String _uri) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTEMPLATEURI, 
                Arrays.<Type>asList(new Utf8String(_uri)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setURI(BigInteger _id, String _uri) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETURI, 
                Arrays.<Type>asList(new Uint256(_id),
                new Utf8String(_uri)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsFactoryInterface() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSFACTORYINTERFACE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> templateURI() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TEMPLATEURI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply(BigInteger _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(new Uint256(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> uri(BigInteger _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_URI, 
                Arrays.<Type>asList(new Uint256(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static AssetContractShared load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetContractShared(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AssetContractShared load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AssetContractShared(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AssetContractShared load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AssetContractShared(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AssetContractShared load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AssetContractShared(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AssetContractShared> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _name, String _symbol, String _templateURI, BigInteger _royaltyFraction, String _proxyRegistryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(_name),
                new Utf8String(_symbol),
                new Utf8String(_templateURI),
                new Uint96(_royaltyFraction),
                new Address(160, _proxyRegistryAddress)));
        return deployRemoteCall(AssetContractShared.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<AssetContractShared> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _name, String _symbol, String _templateURI, BigInteger _royaltyFraction, String _proxyRegistryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(_name),
                new Utf8String(_symbol),
                new Utf8String(_templateURI),
                new Uint96(_royaltyFraction),
                new Address(160, _proxyRegistryAddress)));
        return deployRemoteCall(AssetContractShared.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<AssetContractShared> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _name, String _symbol, String _templateURI, BigInteger _royaltyFraction, String _proxyRegistryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(_name),
                new Utf8String(_symbol),
                new Utf8String(_templateURI),
                new Uint96(_royaltyFraction),
                new Address(160, _proxyRegistryAddress)));
        return deployRemoteCall(AssetContractShared.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<AssetContractShared> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _name, String _symbol, String _templateURI, BigInteger _royaltyFraction, String _proxyRegistryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(_name),
                new Utf8String(_symbol),
                new Utf8String(_templateURI),
                new Uint96(_royaltyFraction),
                new Address(160, _proxyRegistryAddress)));
        return deployRemoteCall(AssetContractShared.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class CreatorChangedEventResponse extends BaseEventResponse {
        public BigInteger _id;

        public String _creator;
    }

    public static class MetaTransactionExecutedEventResponse extends BaseEventResponse {
        public String userAddress;

        public String relayerAddress;

        public byte[] functionSignature;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class PermanentURIEventResponse extends BaseEventResponse {
        public BigInteger _id;

        public String _value;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String value;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
