package com.shannon.android.lib.web3.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class OpenVoiceContract extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b506040516200343d3803806200343d833981810160405281019062000037919062000398565b82828160049080519060200190620000519291906200026a565b5080600590805190602001906200006a9291906200026a565b506200007b620000b860201b60201c565b600281905550505080600b90805190602001906200009b9291906200026a565b50620000af336064620000bd60201b60201c565b505050620006f0565b600090565b620000cd6200026060201b60201c565b6bffffffffffffffffffffffff16816bffffffffffffffffffffffff1611156200012e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000125906200049f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019890620004c1565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff168152506000808201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509050505050565b6000612710905090565b828054620002789062000589565b90600052602060002090601f0160209004810192826200029c5760008555620002e8565b82601f10620002b757805160ff1916838001178555620002e8565b82800160010185558215620002e8579182015b82811115620002e7578251825591602001919060010190620002ca565b5b509050620002f79190620002fb565b5090565b5b8082111562000316576000816000905550600101620002fc565b5090565b6000620003316200032b846200050c565b620004e3565b90508281526020810184848401111562000350576200034f62000658565b5b6200035d84828562000553565b509392505050565b600082601f8301126200037d576200037c62000653565b5b81516200038f8482602086016200031a565b91505092915050565b600080600060608486031215620003b457620003b362000662565b5b600084015167ffffffffffffffff811115620003d557620003d46200065d565b5b620003e38682870162000365565b935050602084015167ffffffffffffffff8111156200040757620004066200065d565b5b620004158682870162000365565b925050604084015167ffffffffffffffff8111156200043957620004386200065d565b5b620004478682870162000365565b9150509250925092565b600062000460602a8362000542565b91506200046d8262000678565b604082019050919050565b60006200048760198362000542565b91506200049482620006c7565b602082019050919050565b60006020820190508181036000830152620004ba8162000451565b9050919050565b60006020820190508181036000830152620004dc8162000478565b9050919050565b6000620004ef62000502565b9050620004fd8282620005bf565b919050565b6000604051905090565b600067ffffffffffffffff8211156200052a576200052962000624565b5b620005358262000667565b9050602081019050919050565b600082825260208201905092915050565b60005b838110156200057357808201518184015260208101905062000556565b8381111562000583576000848401525b50505050565b60006002820490506001821680620005a257607f821691505b60208210811415620005b957620005b8620005f5565b5b50919050565b620005ca8262000667565b810181811067ffffffffffffffff82111715620005ec57620005eb62000624565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201527f2073616c65507269636500000000000000000000000000000000000000000000602082015250565b7f455243323938313a20696e76616c696420726563656976657200000000000000600082015250565b612d3d80620007006000396000f3fe6080604052600436106101145760003560e01c80636352211e116100a0578063a22cb46511610064578063a22cb4651461039b578063b88d4fde146103c4578063c87b56dd146103e0578063e8a3d4851461041d578063e985e9c51461044857610114565b80636352211e146102a457806370a08231146102e157806395d89b411461031e578063a02c30e714610349578063a0712d681461037257610114565b806318160ddd116100e757806318160ddd146101da57806323b872dd146102055780632a55205a1461022157806342842e0e1461025f57806342966c681461027b57610114565b806301ffc9a71461011957806306fdde0314610156578063081812fc14610181578063095ea7b3146101be575b600080fd5b34801561012557600080fd5b50610140600480360381019061013b9190612344565b610485565b60405161014d919061267b565b60405180910390f35b34801561016257600080fd5b5061016b610547565b6040516101789190612696565b60405180910390f35b34801561018d57600080fd5b506101a860048036038101906101a3919061239e565b6105d9565b6040516101b591906125eb565b60405180910390f35b6101d860048036038101906101d39190612304565b610658565b005b3480156101e657600080fd5b506101ef61079c565b6040516101fc9190612718565b60405180910390f35b61021f600480360381019061021a91906121ee565b6107b3565b005b34801561022d57600080fd5b506102486004803603810190610243919061244e565b610ad8565b604051610256929190612652565b60405180910390f35b610279600480360381019061027491906121ee565b610cc3565b005b34801561028757600080fd5b506102a2600480360381019061029d919061239e565b610ce3565b005b3480156102b057600080fd5b506102cb60048036038101906102c6919061239e565b610cfa565b6040516102d891906125eb565b60405180910390f35b3480156102ed57600080fd5b5061030860048036038101906103039190612181565b610d0c565b6040516103159190612718565b60405180910390f35b34801561032a57600080fd5b50610333610dc5565b6040516103409190612696565b60405180910390f35b34801561035557600080fd5b50610370600480360381019061036b91906123cb565b610e57565b005b34801561037e57600080fd5b506103996004803603810190610394919061239e565b610ee1565b005b3480156103a757600080fd5b506103c260048036038101906103bd91906122c4565b610eee565b005b6103de60048036038101906103d99190612241565b610ff9565b005b3480156103ec57600080fd5b506104076004803603810190610402919061239e565b61106c565b6040516104149190612696565b60405180910390f35b34801561042957600080fd5b506104326111b5565b60405161043f9190612696565b60405180910390f35b34801561045457600080fd5b5061046f600480360381019061046a91906121ae565b6111cc565b60405161047c919061267b565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104e057506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105105750632a55205a60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105405750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60606004805461055690612a0c565b80601f016020809104026020016040519081016040528092919081815260200182805461058290612a0c565b80156105cf5780601f106105a4576101008083540402835291602001916105cf565b820191906000526020600020905b8154815290600101906020018083116105b257829003601f168201915b5050505050905090565b60006105e482611260565b61061a576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061066382610cfa565b90508073ffffffffffffffffffffffffffffffffffffffff166106846112bf565b73ffffffffffffffffffffffffffffffffffffffff16146106e7576106b0816106ab6112bf565b6111cc565b6106e6576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b826008600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b60006107a66112c7565b6003546002540303905090565b60006107be826112cc565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610825576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806108318461139a565b9150915061084781876108426112bf565b6113c1565b6108935761085c866108576112bf565b6111cc565b610892576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156108fa576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109078686866001611405565b801561091257600082555b600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154600101919050819055506109e0856109bc88888761140b565b7c020000000000000000000000000000000000000000000000000000000017611433565b600660008681526020019081526020016000208190555060007c020000000000000000000000000000000000000000000000000000000084161415610a68576000600185019050600060066000838152602001908152602001600020541415610a66576002548114610a65578360066000838152602001908152602001600020819055505b5b505b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610ad0868686600161145e565b505050505050565b6000806000600160008681526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff161415610c6e5760006040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff168152505090505b6000610c78611464565b6bffffffffffffffffffffffff1682602001516bffffffffffffffffffffffff1686610ca491906128b0565b610cae919061287f565b90508160000151819350935050509250929050565b610cde83838360405180602001604052806000815250610ff9565b505050565b610cee81600061146e565b610cf7816116c2565b50565b6000610d05826112cc565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d74576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054169050919050565b606060058054610dd490612a0c565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0090612a0c565b8015610e4d5780601f10610e2257610100808354040283529160200191610e4d565b820191906000526020600020905b815481529060010190602001808311610e3057829003601f168201915b5050505050905090565b6000610e61611721565b905060008582610e719190612829565b9050610e7d338761172b565b60008290505b81811015610ed857610e96818686611749565b610ec581878584610ea7919061290a565b81518110610eb857610eb7612b45565b5b60200260200101516118f1565b8080610ed090612a6f565b915050610e83565b50505050505050565b610eeb338261172b565b50565b8060096000610efb6112bf565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610fa86112bf565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610fed919061267b565b60405180910390a35050565b6110048484846107b3565b60008373ffffffffffffffffffffffffffffffffffffffff163b146110665761102f84848484611965565b611065576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b606061107782611260565b6110ad576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a600084815260200190815260200160002080546110cd90612a0c565b80601f01602080910402602001604051908101604052809291908181526020018280546110f990612a0c565b80156111465780601f1061111b57610100808354040283529160200191611146565b820191906000526020600020905b81548152906001019060200180831161112957829003601f168201915b505050505090506000611157611ac5565b905060008151141561116d5781925050506111b0565b6000825111156111a257808260405160200161118a9291906125c7565b604051602081830303815290604052925050506111b0565b6111ab84611b57565b925050505b919050565b606060405180602001604052806000815250905090565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60008161126b6112c7565b1115801561127a575060025482105b80156112b8575060007c0100000000000000000000000000000000000000000000000000000000600660008581526020019081526020016000205416145b9050919050565b600033905090565b600090565b600080829050806112db6112c7565b11611363576002548110156113625760006006600083815260200190815260200160002054905060007c010000000000000000000000000000000000000000000000000000000082161415611360575b600081141561135657600660008360019003935083815260200190815260200160002054905061132b565b8092505050611395565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008060006008600085815260200190815260200160002090508092508254915050915091565b600073ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b60008060e883901c905060e8611422868684611bf6565b62ffffff16901b9150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b50505050565b6000612710905090565b6000611479836112cc565b9050600081905060008061148c8661139a565b9150915084156114f5576114a881846114a36112bf565b6113c1565b6114f4576114bd836114b86112bf565b6111cc565b6114f3576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b5b611503836000886001611405565b801561150e57600082555b600160806001901b03600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506115b6836115738560008861140b565b7c02000000000000000000000000000000000000000000000000000000007c01000000000000000000000000000000000000000000000000000000001717611433565b600660008881526020019081526020016000208190555060007c02000000000000000000000000000000000000000000000000000000008516141561163e57600060018701905060006006600083815260200190815260200160002054141561163c57600254811461163b578460066000838152602001908152602001600020819055505b5b505b85600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46116a883600088600161145e565b600360008154809291906001019190505550505050505050565b60016000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055505050565b6000600254905090565b611745828260405180602001604052806000815250611bff565b5050565b611751611464565b6bffffffffffffffffffffffff16816bffffffffffffffffffffffff1611156117af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a6906126f8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561181f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611816906126d8565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001826bffffffffffffffffffffffff168152506001600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550905050505050565b6118fa82611260565b611939576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611930906126b8565b60405180910390fd5b80600a60008481526020019081526020016000209080519060200190611960929190611ec4565b505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261198b6112bf565b8786866040518563ffffffff1660e01b81526004016119ad9493929190612606565b602060405180830381600087803b1580156119c757600080fd5b505af19250505080156119f857506040513d601f19601f820116820180604052508101906119f59190612371565b60015b611a72573d8060008114611a28576040519150601f19603f3d011682016040523d82523d6000602084013e611a2d565b606091505b50600081511415611a6a576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b6060600b8054611ad490612a0c565b80601f0160208091040260200160405190810160405280929190818152602001828054611b0090612a0c565b8015611b4d5780601f10611b2257610100808354040283529160200191611b4d565b820191906000526020600020905b815481529060010190602001808311611b3057829003601f168201915b5050505050905090565b6060611b6282611260565b611b98576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611ba2611ac5565b9050600081511415611bc35760405180602001604052806000815250611bee565b80611bcd84611c9d565b604051602001611bde9291906125c7565b6040516020818303038152906040525b915050919050565b60009392505050565b611c098383611cf6565b60008373ffffffffffffffffffffffffffffffffffffffff163b14611c985760006002549050600083820390505b611c4a6000868380600101945086611965565b611c80576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b818110611c37578160025414611c9557600080fd5b50505b505050565b606060a060405101806040526020810391506000825281835b600115611ce157600184039350600a81066030018453600a8104905080611cdc57611ce1565b611cb6565b50828103602084039350808452505050919050565b600060025490506000821415611d38576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611d456000848385611405565b600160406001901b178202600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550611dbc83611dad600086600061140b565b611db685611eb4565b17611433565b6006600083815260200190815260200160002081905550600080838301905073ffffffffffffffffffffffffffffffffffffffff85169150828260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600183015b818114611e5d57808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600181019050611e22565b506000821415611e99576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806002819055505050611eaf600084838561145e565b505050565b60006001821460e11b9050919050565b828054611ed090612a0c565b90600052602060002090601f016020900481019282611ef25760008555611f39565b82601f10611f0b57805160ff1916838001178555611f39565b82800160010185558215611f39579182015b82811115611f38578251825591602001919060010190611f1d565b5b509050611f469190611f4a565b5090565b5b80821115611f63576000816000905550600101611f4b565b5090565b6000611f7a611f7584612758565b612733565b90508083825260208201905082856020860282011115611f9d57611f9c612ba8565b5b60005b85811015611feb57813567ffffffffffffffff811115611fc357611fc2612ba3565b5b808601611fd08982612129565b85526020850194506020840193505050600181019050611fa0565b5050509392505050565b600061200861200384612784565b612733565b90508281526020810184848401111561202457612023612bad565b5b61202f8482856129ca565b509392505050565b600061204a612045846127b5565b612733565b90508281526020810184848401111561206657612065612bad565b5b6120718482856129ca565b509392505050565b60008135905061208881612c94565b92915050565b600082601f8301126120a3576120a2612ba3565b5b81356120b3848260208601611f67565b91505092915050565b6000813590506120cb81612cab565b92915050565b6000813590506120e081612cc2565b92915050565b6000815190506120f581612cc2565b92915050565b600082601f8301126121105761210f612ba3565b5b8135612120848260208601611ff5565b91505092915050565b600082601f83011261213e5761213d612ba3565b5b813561214e848260208601612037565b91505092915050565b60008135905061216681612cd9565b92915050565b60008135905061217b81612cf0565b92915050565b60006020828403121561219757612196612bb7565b5b60006121a584828501612079565b91505092915050565b600080604083850312156121c5576121c4612bb7565b5b60006121d385828601612079565b92505060206121e485828601612079565b9150509250929050565b60008060006060848603121561220757612206612bb7565b5b600061221586828701612079565b935050602061222686828701612079565b925050604061223786828701612157565b9150509250925092565b6000806000806080858703121561225b5761225a612bb7565b5b600061226987828801612079565b945050602061227a87828801612079565b935050604061228b87828801612157565b925050606085013567ffffffffffffffff8111156122ac576122ab612bb2565b5b6122b8878288016120fb565b91505092959194509250565b600080604083850312156122db576122da612bb7565b5b60006122e985828601612079565b92505060206122fa858286016120bc565b9150509250929050565b6000806040838503121561231b5761231a612bb7565b5b600061232985828601612079565b925050602061233a85828601612157565b9150509250929050565b60006020828403121561235a57612359612bb7565b5b6000612368848285016120d1565b91505092915050565b60006020828403121561238757612386612bb7565b5b6000612395848285016120e6565b91505092915050565b6000602082840312156123b4576123b3612bb7565b5b60006123c284828501612157565b91505092915050565b600080600080608085870312156123e5576123e4612bb7565b5b60006123f387828801612157565b945050602085013567ffffffffffffffff81111561241457612413612bb2565b5b6124208782880161208e565b935050604061243187828801612079565b92505060606124428782880161216c565b91505092959194509250565b6000806040838503121561246557612464612bb7565b5b600061247385828601612157565b925050602061248485828601612157565b9150509250929050565b6124978161293e565b82525050565b6124a681612950565b82525050565b60006124b7826127e6565b6124c181856127fc565b93506124d18185602086016129d9565b6124da81612bbc565b840191505092915050565b60006124f0826127f1565b6124fa818561280d565b935061250a8185602086016129d9565b61251381612bbc565b840191505092915050565b6000612529826127f1565b612533818561281e565b93506125438185602086016129d9565b80840191505092915050565b600061255c602f8361280d565b915061256782612bcd565b604082019050919050565b600061257f601b8361280d565b915061258a82612c1c565b602082019050919050565b60006125a2602a8361280d565b91506125ad82612c45565b604082019050919050565b6125c1816129a8565b82525050565b60006125d3828561251e565b91506125df828461251e565b91508190509392505050565b6000602082019050612600600083018461248e565b92915050565b600060808201905061261b600083018761248e565b612628602083018661248e565b61263560408301856125b8565b818103606083015261264781846124ac565b905095945050505050565b6000604082019050612667600083018561248e565b61267460208301846125b8565b9392505050565b6000602082019050612690600083018461249d565b92915050565b600060208201905081810360008301526126b081846124e5565b905092915050565b600060208201905081810360008301526126d18161254f565b9050919050565b600060208201905081810360008301526126f181612572565b9050919050565b6000602082019050818103600083015261271181612595565b9050919050565b600060208201905061272d60008301846125b8565b92915050565b600061273d61274e565b90506127498282612a3e565b919050565b6000604051905090565b600067ffffffffffffffff82111561277357612772612b74565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561279f5761279e612b74565b5b6127a882612bbc565b9050602081019050919050565b600067ffffffffffffffff8211156127d0576127cf612b74565b5b6127d982612bbc565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612834826129a8565b915061283f836129a8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561287457612873612ab8565b5b828201905092915050565b600061288a826129a8565b9150612895836129a8565b9250826128a5576128a4612ae7565b5b828204905092915050565b60006128bb826129a8565b91506128c6836129a8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156128ff576128fe612ab8565b5b828202905092915050565b6000612915826129a8565b9150612920836129a8565b92508282101561293357612932612ab8565b5b828203905092915050565b600061294982612988565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b838110156129f75780820151818401526020810190506129dc565b83811115612a06576000848401525b50505050565b60006002820490506001821680612a2457607f821691505b60208210811415612a3857612a37612b16565b5b50919050565b612a4782612bbc565b810181811067ffffffffffffffff82111715612a6657612a65612b74565b5b80604052505050565b6000612a7a826129a8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612aad57612aac612ab8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732314155524953746f726167653a2055524920736574206f66206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f455243323938313a20496e76616c696420706172616d65746572730000000000600082015250565b7f455243323938313a20726f79616c7479206665652077696c6c2065786365656460008201527f2073616c65507269636500000000000000000000000000000000000000000000602082015250565b612c9d8161293e565b8114612ca857600080fd5b50565b612cb481612950565b8114612cbf57600080fd5b50565b612ccb8161295c565b8114612cd657600080fd5b50565b612ce2816129a8565b8114612ced57600080fd5b50565b612cf9816129b2565b8114612d0457600080fd5b5056fea2646970667358221220b52d637e908b1587956db9c0a50a3cfe214cbb9dca6cd14baf8a7b55138b6e0a64736f6c63430008070033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_CONTRACTURI = "contractURI";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTWITHTOKENURIANDROYALTY = "mintWithTokenURIAndRoyalty";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_ROYALTYINFO = "royaltyInfo";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event CONSECUTIVETRANSFER_EVENT = new Event("ConsecutiveTransfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected OpenVoiceContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected OpenVoiceContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected OpenVoiceContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected OpenVoiceContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<ConsecutiveTransferEventResponse> getConsecutiveTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CONSECUTIVETRANSFER_EVENT, transactionReceipt);
        ArrayList<ConsecutiveTransferEventResponse> responses = new ArrayList<ConsecutiveTransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ConsecutiveTransferEventResponse typedResponse = new ConsecutiveTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.fromTokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ConsecutiveTransferEventResponse> consecutiveTransferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ConsecutiveTransferEventResponse>() {
            @Override
            public ConsecutiveTransferEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CONSECUTIVETRANSFER_EVENT, log);
                ConsecutiveTransferEventResponse typedResponse = new ConsecutiveTransferEventResponse();
                typedResponse.log = log;
                typedResponse.fromTokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.toTokenId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ConsecutiveTransferEventResponse> consecutiveTransferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CONSECUTIVETRANSFER_EVENT));
        return consecutiveTransferEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(160, owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> contractURI() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONTRACTURI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new Address(160, owner),
                new Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(BigInteger quantity) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new Uint256(quantity)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintWithTokenURIAndRoyalty(BigInteger quantity, List<String> tokenURI, String royaltyReceiver, BigInteger feeNumerator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTWITHTOKENURIANDROYALTY, 
                Arrays.<Type>asList(new Uint256(quantity),
                new org.web3j.abi.datatypes.DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.web3j.abi.Utils.typeMap(tokenURI, Utf8String.class)),
                new Address(160, royaltyReceiver),
                new org.web3j.abi.datatypes.generated.Uint96(feeNumerator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> royaltyInfo(BigInteger _tokenId, BigInteger _salePrice) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ROYALTYINFO, 
                Arrays.<Type>asList(new Uint256(_tokenId),
                new Uint256(_salePrice)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(tokenId),
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(160, operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static OpenVoiceContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new OpenVoiceContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static OpenVoiceContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new OpenVoiceContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static OpenVoiceContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new OpenVoiceContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static OpenVoiceContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new OpenVoiceContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<OpenVoiceContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name, String symbol, String baseTokenURI) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol),
                new Utf8String(baseTokenURI)));
        return deployRemoteCall(OpenVoiceContract.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<OpenVoiceContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name, String symbol, String baseTokenURI) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol),
                new Utf8String(baseTokenURI)));
        return deployRemoteCall(OpenVoiceContract.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<OpenVoiceContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol, String baseTokenURI) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol),
                new Utf8String(baseTokenURI)));
        return deployRemoteCall(OpenVoiceContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<OpenVoiceContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol, String baseTokenURI) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol),
                new Utf8String(baseTokenURI)));
        return deployRemoteCall(OpenVoiceContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class ConsecutiveTransferEventResponse extends BaseEventResponse {
        public BigInteger fromTokenId;

        public String from;

        public String to;

        public BigInteger toTokenId;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
