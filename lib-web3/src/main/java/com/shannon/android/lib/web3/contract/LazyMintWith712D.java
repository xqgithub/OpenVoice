package com.shannon.android.lib.web3.contract;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint96;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.2.
 */
@SuppressWarnings("rawtypes")
public class LazyMintWith712D extends Contract {
    public static final String BINARY = "6101406040523480156200001257600080fd5b5060405162002d3938038062002d398339818101604052810190620000389190620003db565b816040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a08181525050620000d88184846200019160201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508061012081815250505050505050620001486000801b6200013c620001cd60201b60201c565b620001d560201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000652565b60008383834630604051602001620001ae95949392919062000474565b6040516020818303038152906040528051906020012090509392505050565b600033905090565b620001e78282620001eb60201b60201c565b5050565b620001fd8282620002dc60201b60201c565b620002d857600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200027d620001cd60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006200035d6200035784620004fa565b620004d1565b9050828152602081018484840111156200037c576200037b62000618565b5b6200038984828562000578565b509392505050565b600081519050620003a28162000638565b92915050565b600082601f830112620003c057620003bf62000613565b5b8151620003d284826020860162000346565b91505092915050565b60008060408385031215620003f557620003f462000622565b5b600083015167ffffffffffffffff8111156200041657620004156200061d565b5b6200042485828601620003a8565b9250506020620004378582860162000391565b9150509250929050565b6200044c8162000530565b82525050565b6200045d8162000544565b82525050565b6200046e816200056e565b82525050565b600060a0820190506200048b600083018862000452565b6200049a602083018762000452565b620004a9604083018662000452565b620004b8606083018562000463565b620004c7608083018462000441565b9695505050505050565b6000620004dd620004f0565b9050620004eb8282620005ae565b919050565b6000604051905090565b600067ffffffffffffffff821115620005185762000517620005e4565b5b620005238262000627565b9050602081019050919050565b60006200053d826200054e565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620005985780820151818401526020810190506200057b565b83811115620005a8576000848401525b50505050565b620005b98262000627565b810181811067ffffffffffffffff82111715620005db57620005da620005e4565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b620006438162000530565b81146200064f57600080fd5b50565b60805160a05160c05160601c60e0516101005161012051612694620006a56000396000611378015260006113ba01526000611399015260006112ce015260006113240152600061134d01526126946000f3fe6080604052600436106100915760003560e01c806391d148541161005957806391d148541461018b578063a217fddf146101c8578063d547741f146101f3578063ea66a3281461021c578063f741ae061461023857610091565b806301ffc9a714610096578063248a9ca3146100d35780632f2ff15d1461011057806336568abe146101395780636dc2f26114610162575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190611831565b610254565b6040516100ca9190611d09565b60405180910390f35b3480156100df57600080fd5b506100fa60048036038101906100f591906117c4565b6102ce565b6040516101079190611d24565b60405180910390f35b34801561011c57600080fd5b50610137600480360381019061013291906117f1565b6102ed565b005b34801561014557600080fd5b50610160600480360381019061015b91906117f1565b61030e565b005b34801561016e57600080fd5b5061018960048036038101906101849190611757565b610391565b005b34801561019757600080fd5b506101b260048036038101906101ad91906117f1565b6103f2565b6040516101bf9190611d09565b60405180910390f35b3480156101d457600080fd5b506101dd61045c565b6040516101ea9190611d24565b60405180910390f35b3480156101ff57600080fd5b5061021a600480360381019061021591906117f1565b610463565b005b6102366004803603810190610231919061185e565b610484565b005b610252600480360381019061024d919061185e565b6106c0565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102c757506102c682610846565b5b9050919050565b6000806000838152602001908152602001600020600101549050919050565b6102f6826102ce565b6102ff816108b0565b61030983836108c4565b505050565b6103166109a4565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037a90611f48565b60405180910390fd5b61038d82826109ac565b5050565b6103a56000801b6103a06109a4565b6103f2565b6103ae57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b61046c826102ce565b610475816108b0565b61047f83836109ac565b505050565b600061048f87610a8d565b90508660a0015173ffffffffffffffffffffffffffffffffffffffff166104fa8285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610b09565b73ffffffffffffffffffffffffffffffffffffffff1614610550576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054790611ee8565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a8860a00151888a6000015189896040518663ffffffff1660e01b81526004016105bb959493929190611c55565b600060405180830381600087803b1580156105d557600080fd5b505af11580156105e9573d6000803e3d6000fd5b505050506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a55205a8960000151346040518363ffffffff1660e01b8152600401610650929190611f68565b604080518083038186803b15801561066757600080fd5b505afa15801561067b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069f9190611784565b9150506106b68860a0015134838b60600151610b30565b5050505050505050565b60006106cb87610a8d565b9050866060015173ffffffffffffffffffffffffffffffffffffffff166107368285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610b09565b73ffffffffffffffffffffffffffffffffffffffff161461078c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078390611ee8565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d3b9ff7f87896000015188888c608001516040518663ffffffff1660e01b81526004016107f7959493929190611caf565b600060405180830381600087803b15801561081157600080fd5b505af1158015610825573d6000803e3d6000fd5b50505050600061083c886060015134836000610b30565b5050505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6108c1816108bc6109a4565b610db0565b50565b6108ce82826103f2565b6109a057600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506109456109a4565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6109b682826103f2565b15610a8957600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610a2e6109a4565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000610b027f6697de68ba13acbc918df3edbe217031a9b63ef8d3466d3e33e0ed35dd96fb8d836000015184602001518560400151866060015187608001518860a00151604051602001610ae79796959493929190611d92565b60405160208183030381529060405280519060200120610e4d565b9050919050565b6000806000610b188585610e67565b91509150610b2581610eb9565b819250505092915050565b60006004600185610b4191906120bc565b610b4b919061208b565b905060008185610b5b9190612116565b9050600080851115610c2d57828587610b749190612116565b610b7e9190612116565b91508373ffffffffffffffffffffffffffffffffffffffff1685604051610ba490611c06565b60006040518083038185875af1925050503d8060008114610be1576040519150601f19603f3d011682016040523d82523d6000602084013e610be6565b606091505b50508091505080610c2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2390611ec8565b60405180910390fd5b5b8673ffffffffffffffffffffffffffffffffffffffff1682604051610c5190611c06565b60006040518083038185875af1925050503d8060008114610c8e576040519150601f19603f3d011682016040523d82523d6000602084013e610c93565b606091505b50508091505080610cd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd090611ec8565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683604051610d1f90611c06565b60006040518083038185875af1925050503d8060008114610d5c576040519150601f19603f3d011682016040523d82523d6000602084013e610d61565b606091505b50508091505080610da7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9e90611ec8565b60405180910390fd5b50505050505050565b610dba82826103f2565b610e4957610ddf8173ffffffffffffffffffffffffffffffffffffffff16601461108e565b610ded8360001c602061108e565b604051602001610dfe929190611c1b565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e409190611e46565b60405180910390fd5b5050565b6000610e60610e5a6112ca565b836113e4565b9050919050565b600080604183511415610ea95760008060006020860151925060408601519150606086015160001a9050610e9d87828585611417565b94509450505050610eb2565b60006002915091505b9250929050565b60006004811115610ecd57610ecc6122f2565b5b816004811115610ee057610edf6122f2565b5b1415610eeb5761108b565b60016004811115610eff57610efe6122f2565b5b816004811115610f1257610f116122f2565b5b1415610f53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4a90611e68565b60405180910390fd5b60026004811115610f6757610f666122f2565b5b816004811115610f7a57610f796122f2565b5b1415610fbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb290611ea8565b60405180910390fd5b60036004811115610fcf57610fce6122f2565b5b816004811115610fe257610fe16122f2565b5b1415611023576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101a90611f08565b60405180910390fd5b600480811115611036576110356122f2565b5b816004811115611049576110486122f2565b5b141561108a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108190611f28565b60405180910390fd5b5b50565b6060600060028360026110a191906120bc565b6110ab9190612035565b67ffffffffffffffff8111156110c4576110c3612350565b5b6040519080825280601f01601f1916602001820160405280156110f65781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061112e5761112d612321565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061119257611191612321565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026111d291906120bc565b6111dc9190612035565b90505b600181111561127c577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061121e5761121d612321565b5b1a60f81b82828151811061123557611234612321565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806112759061222f565b90506111df565b50600084146112c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b790611e88565b60405180910390fd5b8091505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561134657507f000000000000000000000000000000000000000000000000000000000000000046145b15611373577f000000000000000000000000000000000000000000000000000000000000000090506113e1565b6113de7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611524565b90505b90565b600082826040516020016113f9929190611bcf565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561145257600060039150915061151b565b601b8560ff161415801561146a5750601c8560ff1614155b1561147c57600060049150915061151b565b6000600187878787604051600081526020016040526040516114a19493929190611e01565b6020604051602081039080840390855afa1580156114c3573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156115125760006001925092505061151b565b80600092509250505b94509492505050565b6000838383463060405160200161153f959493929190611d3f565b6040516020818303038152906040528051906020012090509392505050565b600061157161156c84611fb6565b611f91565b90508281526020810184848401111561158d5761158c612393565b5b6115988482856121ed565b509392505050565b6000813590506115af816125eb565b92915050565b6000815190506115c4816125eb565b92915050565b6000813590506115d981612602565b92915050565b6000813590506115ee81612619565b92915050565b60008083601f84011261160a57611609612384565b5b8235905067ffffffffffffffff8111156116275761162661237f565b5b6020830191508360018202830111156116435761164261238e565b5b9250929050565b600082601f83011261165f5761165e612384565b5b813561166f84826020860161155e565b91505092915050565b600060c0828403121561168e5761168d612389565b5b61169860c0611f91565b905060006116a884828501611718565b60008301525060206116bc848285016115a0565b60208301525060406116d084828501611718565b60408301525060606116e4848285016115a0565b60608301525060806116f884828501611742565b60808301525060a061170c848285016115a0565b60a08301525092915050565b60008135905061172781612630565b92915050565b60008151905061173c81612630565b92915050565b60008135905061175181612647565b92915050565b60006020828403121561176d5761176c61239d565b5b600061177b848285016115a0565b91505092915050565b6000806040838503121561179b5761179a61239d565b5b60006117a9858286016115b5565b92505060206117ba8582860161172d565b9150509250929050565b6000602082840312156117da576117d961239d565b5b60006117e8848285016115ca565b91505092915050565b600080604083850312156118085761180761239d565b5b6000611816858286016115ca565b9250506020611827858286016115a0565b9150509250929050565b6000602082840312156118475761184661239d565b5b6000611855848285016115df565b91505092915050565b600080600080600080610140878903121561187c5761187b61239d565b5b600061188a89828a01611678565b96505060c061189b89828a016115a0565b95505060e06118ac89828a01611718565b94505061010087013567ffffffffffffffff8111156118ce576118cd612398565b5b6118da89828a0161164a565b93505061012087013567ffffffffffffffff8111156118fc576118fb612398565b5b61190889828a016115f4565b92509250509295509295509295565b6119208161214a565b82525050565b61192f8161215c565b82525050565b61193e81612168565b82525050565b61195561195082612168565b61228a565b82525050565b600061196682611fe7565b6119708185611ffd565b93506119808185602086016121fc565b611989816123a2565b840191505092915050565b600061199f82611ff2565b6119a98185612019565b93506119b98185602086016121fc565b6119c2816123a2565b840191505092915050565b60006119d882611ff2565b6119e2818561202a565b93506119f28185602086016121fc565b80840191505092915050565b6000611a0b601883612019565b9150611a16826123b3565b602082019050919050565b6000611a2e602083612019565b9150611a39826123dc565b602082019050919050565b6000611a51601f83612019565b9150611a5c82612405565b602082019050919050565b6000611a7460028361202a565b9150611a7f8261242e565b600282019050919050565b6000611a97601483612019565b9150611aa282612457565b602082019050919050565b6000611aba601183612019565b9150611ac582612480565b602082019050919050565b6000611add602283612019565b9150611ae8826124a9565b604082019050919050565b6000611b00602283612019565b9150611b0b826124f8565b604082019050919050565b6000611b2360008361200e565b9150611b2e82612547565b600082019050919050565b6000611b4660178361202a565b9150611b518261254a565b601782019050919050565b6000611b6960118361202a565b9150611b7482612573565b601182019050919050565b6000611b8c602f83612019565b9150611b978261259c565b604082019050919050565b611bab816121be565b82525050565b611bba816121c8565b82525050565b611bc9816121d5565b82525050565b6000611bda82611a67565b9150611be68285611944565b602082019150611bf68284611944565b6020820191508190509392505050565b6000611c1182611b16565b9150819050919050565b6000611c2682611b39565b9150611c3282856119cd565b9150611c3d82611b5c565b9150611c4982846119cd565b91508190509392505050565b600060a082019050611c6a6000830188611917565b611c776020830187611917565b611c846040830186611ba2565b611c916060830185611ba2565b8181036080830152611ca3818461195b565b90509695505050505050565b600060a082019050611cc46000830188611917565b611cd16020830187611ba2565b611cde6040830186611ba2565b8181036060830152611cf0818561195b565b9050611cff6080830184611bc0565b9695505050505050565b6000602082019050611d1e6000830184611926565b92915050565b6000602082019050611d396000830184611935565b92915050565b600060a082019050611d546000830188611935565b611d616020830187611935565b611d6e6040830186611935565b611d7b6060830185611ba2565b611d886080830184611917565b9695505050505050565b600060e082019050611da7600083018a611935565b611db46020830189611ba2565b611dc16040830188611917565b611dce6060830187611ba2565b611ddb6080830186611917565b611de860a0830185611bc0565b611df560c0830184611917565b98975050505050505050565b6000608082019050611e166000830187611935565b611e236020830186611bb1565b611e306040830185611935565b611e3d6060830184611935565b95945050505050565b60006020820190508181036000830152611e608184611994565b905092915050565b60006020820190508181036000830152611e81816119fe565b9050919050565b60006020820190508181036000830152611ea181611a21565b9050919050565b60006020820190508181036000830152611ec181611a44565b9050919050565b60006020820190508181036000830152611ee181611a8a565b9050919050565b60006020820190508181036000830152611f0181611aad565b9050919050565b60006020820190508181036000830152611f2181611ad0565b9050919050565b60006020820190508181036000830152611f4181611af3565b9050919050565b60006020820190508181036000830152611f6181611b7f565b9050919050565b6000604082019050611f7d6000830185611ba2565b611f8a6020830184611ba2565b9392505050565b6000611f9b611fac565b9050611fa78282612259565b919050565b6000604051905090565b600067ffffffffffffffff821115611fd157611fd0612350565b5b611fda826123a2565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000612040826121be565b915061204b836121be565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156120805761207f612294565b5b828201905092915050565b6000612096826121be565b91506120a1836121be565b9250826120b1576120b06122c3565b5b828204905092915050565b60006120c7826121be565b91506120d2836121be565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561210b5761210a612294565b5b828202905092915050565b6000612121826121be565b915061212c836121be565b92508282101561213f5761213e612294565b5b828203905092915050565b60006121558261219e565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006bffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561221a5780820151818401526020810190506121ff565b83811115612229576000848401525b50505050565b600061223a826121be565b9150600082141561224e5761224d612294565b5b600182039050919050565b612262826123a2565b810181811067ffffffffffffffff8211171561228157612280612350565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f4661696c656420746f2073656e64206d6f6e6579000000000000000000000000600082015250565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6125f48161214a565b81146125ff57600080fd5b50565b61260b81612168565b811461261657600080fd5b50565b61262281612172565b811461262d57600080fd5b50565b612639816121be565b811461264457600080fd5b50565b612650816121d5565b811461265b57600080fd5b5056fea2646970667358221220cd1ddbce79f9b6aef0abb0abf6862d98f0cfa6d79fe7234675fa6dfd9879082764736f6c63430008070033";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_MINTNFT = "mintNFT";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SETPLATFORMADDRESS = "setPlatFormAddress";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TRANSFERNFT = "transferNFT";

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {
            }, new TypeReference<Bytes32>(true) {
            }, new TypeReference<Bytes32>(true) {
            }));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }));
    ;

    @Deprecated
    protected LazyMintWith712D(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected LazyMintWith712D(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected LazyMintWith712D(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected LazyMintWith712D(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN,
                Arrays.<Type>asList(new Bytes32(role)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                }));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE,
                Arrays.<Type>asList(new Bytes32(role),
                        new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE,
                Arrays.<Type>asList(new Bytes32(role),
                        new Address(160, account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintNFT(VerifyInfo vinfo, String _to, BigInteger _quantity, byte[] _data, byte[] _signature, BigInteger weiValue) {
        android.util.Log.e("TAG", "mintNFT: "+ vinfo._tokenId.getValue().intValue() );
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTNFT,
                Arrays.<Type>asList(vinfo,
                        new Address(160, _to),
                        new Uint256(_quantity),
                        new DynamicBytes(_data),
                        new DynamicBytes(_signature)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> mintNFT(DynamicArray vinfo, String _to, BigInteger _quantity, byte[] _data, byte[] _signature, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTNFT,
                Arrays.<Type>asList(vinfo,
                        new Address(160, _to),
                        new Uint256(_quantity),
                        new DynamicBytes(_data),
                        new DynamicBytes(_signature)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }


    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE,
                Arrays.<Type>asList(new Bytes32(role),
                        new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE,
                Arrays.<Type>asList(new Bytes32(role),
                        new Address(160, account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPlatFormAddress(String _platformAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPLATFORMADDRESS,
                Arrays.<Type>asList(new Address(160, _platformAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferNFT(VerifyInfo vinfo, String _to, BigInteger _amount, byte[] _data, byte[] _signature, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERNFT,
                Arrays.<Type>asList(vinfo,
                        new Address(160, _to),
                        new Uint256(_amount),
                        new DynamicBytes(_data),
                        new DynamicBytes(_signature)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    @Deprecated
    public static LazyMintWith712D load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new LazyMintWith712D(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static LazyMintWith712D load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new LazyMintWith712D(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static LazyMintWith712D load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new LazyMintWith712D(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static LazyMintWith712D load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new LazyMintWith712D(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<LazyMintWith712D> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name, String _nftAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Address(160, _nftAddress)));
        return deployRemoteCall(LazyMintWith712D.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<LazyMintWith712D> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name, String _nftAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Address(160, _nftAddress)));
        return deployRemoteCall(LazyMintWith712D.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<LazyMintWith712D> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name, String _nftAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Address(160, _nftAddress)));
        return deployRemoteCall(LazyMintWith712D.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<LazyMintWith712D> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name, String _nftAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Address(160, _nftAddress)));
        return deployRemoteCall(LazyMintWith712D.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class VerifyInfo extends StaticStruct {
        public Uint256 _tokenId;

        public String _contract;

        public Uint256 _price;

        public String _creator;

        public BigInteger _royaltyFraction;

        public String _seller;

        public VerifyInfo(Uint256 _tokenId, Address _contract, Uint256 _price, Address _creator, Uint96 _royaltyFraction, Address _seller) {
            super(_tokenId,
                    _contract,
                    _price,
                    _creator,
                    _royaltyFraction,
                    _seller);
            this._tokenId = _tokenId ;
            this._contract = _contract.getValue();
            this._price = _price ;
            this._creator = _creator.getValue();
            this._royaltyFraction = _royaltyFraction.getValue();
            this._seller = _seller.getValue();
        }


        @Override
        public String toString() {
            return "VerifyInfo{" +
                    "_tokenId=" + _tokenId +
                    ", _contract=" + _contract +
                    ", _price=" + _price +
                    ", _creator=" + _creator +
                    ", _royaltyFraction=" + _royaltyFraction +
                    ", _seller=" + _seller +
                    '}';
        }
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }
}
